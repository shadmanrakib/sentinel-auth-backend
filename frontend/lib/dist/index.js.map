{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["// This file was scaffolded using Gen AI with the openapi specification as the prompt input\n\n/**\n * Sentinel Auth Client\n * A client-side API for interacting with the Sentinel Auth Backend\n */\n\nimport { z } from \"zod\";\n\n// Zod schemas for request and response validation\nconst TokensResponseSchema = z.object({\n  access_token: z.string(),\n  id_token: z.string(),\n  refresh_token: z.string(),\n  expires_in: z.number(),\n});\n\nconst RefreshTokensResponseSchema = z.object({\n  access_token: z.string(),\n  id_token: z.string(),\n  expires_in: z.number(),\n});\n\nconst AuthCodeResponseSchema = z.object({\n  code: z.string(),\n  expires_in: z.number(),\n});\n\nconst EmailRegistrationRequestSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n  client_id: z.string(),\n  code_challenge: z.string(),\n  code_challenge_method: z.string(),\n  redirect_uri: z.string().url().optional(),\n  metadata: z.record(z.any()).optional(),\n});\n\nconst EmailLoginRequestSchema = z.object({\n  email: z.string().email(),\n  password: z.string(),\n  client_id: z.string(),\n  code_challenge: z.string(),\n  code_challenge_method: z.string(),\n  redirect_uri: z.string().url().optional(),\n});\n\nconst AuthTokenRequestSchema = z.object({\n  code: z.string(),\n  client_id: z.string(),\n  code_verifier: z.string(),\n});\n\nconst AuthRefreshRequestSchema = z.object({\n  refresh_token: z.string(),\n  client_id: z.string(),\n  code_verifier: z.string(),\n});\n\nconst AuthVerifyRequestSchema = z.object({\n  token: z.string(),\n  client_id: z.string(),\n});\n\nconst AuthVerifyResponseSchema = z.object({\n  valid: z.boolean(),\n  claims: z.record(z.any()),\n});\n\nconst ProviderOptionSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  logo_url: z.string().optional(),\n  description: z.string(),\n});\n\nconst StrippedClientProviderSchema = z.object({\n  id: z.string(),\n  client_id: z.string(),\n  provider_option: ProviderOptionSchema,\n  data: z.record(z.any()).nullable().optional(),\n});\n\nconst ErrorResponseSchema = z.object({\n  error: z.string(),\n  error_description: z.string(),\n});\n\n// Types derived from Zod schemas\nexport type TokensResponse = z.infer<typeof TokensResponseSchema>;\nexport type RefreshTokensResponse = z.infer<typeof RefreshTokensResponseSchema>;\nexport type AuthCodeResponse = z.infer<typeof AuthCodeResponseSchema>;\nexport type EmailRegistrationRequest = z.infer<\n  typeof EmailRegistrationRequestSchema\n>;\nexport type EmailLoginRequest = z.infer<typeof EmailLoginRequestSchema>;\nexport type AuthTokenRequest = z.infer<typeof AuthTokenRequestSchema>;\nexport type AuthRefreshRequest = z.infer<typeof AuthRefreshRequestSchema>;\nexport type AuthVerifyRequest = z.infer<typeof AuthVerifyRequestSchema>;\nexport type AuthVerifyResponse = z.infer<typeof AuthVerifyResponseSchema>;\nexport type StrippedClientProvider = z.infer<\n  typeof StrippedClientProviderSchema\n>;\nexport type ErrorResponse = z.infer<typeof ErrorResponseSchema>;\n\n// Configuration type for SentinelAuth\nexport type SentinelAuthConfig = {\n  apiBaseUrl: string;\n  uiBaseUrl: string;\n  clientId: string;\n  redirectUri?: string;\n  storageType?: \"localStorage\" | \"sessionStorage\" | \"memory\";\n  autoRefresh?: boolean;\n  refreshThreshold?: number;\n};\n\n// Storage interface\nexport interface Storage {\n  get(key: string): string | null;\n  set(key: string, value: string): void;\n  remove(key: string): void;\n  clear(): void;\n}\n\n// JWT Claims interface\nexport interface JWTClaims {\n  sub: string;\n  iss: string;\n  aud: string;\n  exp: number;\n  iat: number;\n  [key: string]: any;\n}\n\nexport interface AuthState {\n  isAuthenticated: boolean;\n  user: JWTClaims | null;\n  expiresAt: number | null;\n}\n\nexport type AuthStateChangeListener = (state: AuthState) => void;\n\nclass SentinelAuth {\n  private apiBaseUrl: string;\n  private uiBaseUrl: string;\n  private clientId: string;\n  private redirectUri: string | undefined;\n  private storageType: \"localStorage\" | \"sessionStorage\" | \"memory\";\n  private storage: Storage;\n  private autoRefresh: boolean;\n  private refreshThreshold: number;\n  private refreshTimerId: number | null = null;\n  private STORAGE_KEYS: {\n    ACCESS_TOKEN: string;\n    ID_TOKEN: string;\n    REFRESH_TOKEN: string;\n    EXPIRES_AT: string;\n  };\n  private authStateListeners: AuthStateChangeListener[] = [];\n\n  /**\n   * Initializes the Sentinel Auth client\n   * @param config - Configuration object\n   */\n  constructor(config: SentinelAuthConfig) {\n    // Required config\n    if (!config.apiBaseUrl) throw new Error(\"baseUrl is required\");\n    if (!config.clientId) throw new Error(\"clientId is required\");\n\n    this.apiBaseUrl = config.apiBaseUrl.replace(/\\/$/, \"\"); // Remove trailing slash if present\n    this.uiBaseUrl = config.uiBaseUrl.replace(/\\/$/, \"\"); // Remove trailing slash if present\n\n    this.clientId = config.clientId;\n    this.redirectUri = config.redirectUri || undefined;\n\n    // Storage configuration\n    this.storageType = config.storageType || \"localStorage\";\n    this.storage = this._initializeStorage(this.storageType);\n\n    // Token refresh configuration\n    this.autoRefresh = config.autoRefresh !== false;\n    this.refreshThreshold = config.refreshThreshold || 300; // 5 minutes\n\n    // Token keys in storage\n    this.STORAGE_KEYS = {\n      ACCESS_TOKEN: `sentinel_access_token_${this.clientId}`,\n      ID_TOKEN: `sentinel_id_token_${this.clientId}`,\n      REFRESH_TOKEN: `sentinel_refresh_token_${this.clientId}`,\n      EXPIRES_AT: `sentinel_expires_at_${this.clientId}`,\n    };\n\n    // Initialize refresh timer if needed\n    if (this.autoRefresh && this.isAuthenticated()) {\n      this._setupRefreshTimer();\n    }\n  }\n\n  /**\n   * Initialize the storage mechanism based on config\n   * @private\n   */\n  private _initializeStorage(\n    type: \"localStorage\" | \"sessionStorage\" | \"memory\"\n  ): Storage {\n    switch (type) {\n      case \"localStorage\":\n        return {\n          get: (key: string) => localStorage.getItem(key),\n          set: (key: string, value: string) => localStorage.setItem(key, value),\n          remove: (key: string) => localStorage.removeItem(key),\n          clear: () => {\n            Object.values(this.STORAGE_KEYS).forEach((key) =>\n              localStorage.removeItem(key)\n            );\n          },\n        };\n      case \"sessionStorage\":\n        return {\n          get: (key: string) => sessionStorage.getItem(key),\n          set: (key: string, value: string) =>\n            sessionStorage.setItem(key, value),\n          remove: (key: string) => sessionStorage.removeItem(key),\n          clear: () => {\n            Object.values(this.STORAGE_KEYS).forEach((key) =>\n              sessionStorage.removeItem(key)\n            );\n          },\n        };\n      case \"memory\":\n        const memoryStorage: Record<string, string> = {};\n        return {\n          get: (key: string) => memoryStorage[key] || null,\n          set: (key: string, value: string) => {\n            memoryStorage[key] = value;\n          },\n          remove: (key: string) => {\n            delete memoryStorage[key];\n          },\n          clear: () => {\n            Object.values(this.STORAGE_KEYS).forEach((key) => {\n              delete memoryStorage[key];\n            });\n          },\n        };\n      default:\n        throw new Error(`Unsupported storage type: ${type}`);\n    }\n  }\n\n  /**\n   * Setup a timer to refresh the token before it expires\n   * @private\n   */\n  private _setupRefreshTimer(): void {\n    const expiresAtStr = this.storage.get(this.STORAGE_KEYS.EXPIRES_AT);\n    if (!expiresAtStr) return;\n\n    const expiresAt = parseInt(expiresAtStr, 10);\n    const now = Math.floor(Date.now() / 1000);\n    const timeUntilRefresh = expiresAt - now - this.refreshThreshold;\n\n    if (timeUntilRefresh <= 0) {\n      // Token is already expired or will expire soon, refresh now\n      this.refreshTokens().catch((err) =>\n        console.error(\"Failed to refresh tokens:\", err)\n      );\n    } else {\n      // Set timer to refresh before expiration\n      if (this.refreshTimerId) window.clearTimeout(this.refreshTimerId);\n      this.refreshTimerId = window.setTimeout(() => {\n        this.refreshTokens().catch((err) =>\n          console.error(\"Failed to refresh tokens:\", err)\n        );\n      }, timeUntilRefresh * 1000);\n    }\n  }\n\n  /**\n   * Get the current auth state\n   * @returns Current auth state\n   */\n  getCurrentAuthState(): AuthState {\n    const isAuthenticated = this.isAuthenticated();\n    const user = this.getUserInfo();\n    const expiresAt = this.getTokenExpiration();\n\n    return {\n      isAuthenticated,\n      user,\n      expiresAt,\n    };\n  }\n\n  /**\n   * Notify all auth state listeners of the current state\n   * @private\n   */\n  private _notifyAuthStateChange(): void {\n    const currentState = this.getCurrentAuthState();\n    this.authStateListeners.forEach((listener) => {\n      try {\n        console.log('sub fire');\n        listener(currentState);\n      } catch (error) {\n        console.error(\"Error in auth state change listener:\", error);\n      }\n    });\n  }\n\n  /**\n   * Add an auth state change listener\n   * @param listener - Function to call when auth state changes\n   * @returns Function to remove the listener\n   */\n  onAuthStateChange(listener: AuthStateChangeListener): () => void {\n    this.authStateListeners.push(listener);\n\n    // Immediately notify the new listener of the current state\n    try {\n      console.log('init fire')\n      listener(this.getCurrentAuthState());\n    } catch (error) {\n      console.error(\"Error in initial auth state notification:\", error);\n    }\n\n    // Return a function to remove this listener\n    return () => {\n      this.authStateListeners = this.authStateListeners.filter(\n        (l) => l !== listener\n      );\n    };\n  }\n\n  /**\n   * Make API request with proper headers and error handling\n   * @private\n   */\n  private async _makeRequest<T>(\n    endpoint: string,\n    options: RequestInit = {},\n    responseSchema: z.ZodType<T>\n  ): Promise<T> {\n    const url = `${this.apiBaseUrl}${endpoint}`;\n\n    const defaultOptions: RequestInit = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const mergedOptions: RequestInit = {\n      ...defaultOptions,\n      ...options,\n      headers: {\n        ...defaultOptions.headers,\n        ...options.headers,\n      },\n    };\n\n    if (\n      mergedOptions.body &&\n      typeof mergedOptions.body === \"object\" &&\n      !(mergedOptions.body instanceof FormData)\n    ) {\n      mergedOptions.body = JSON.stringify(mergedOptions.body);\n    }\n\n    try {\n      const response = await fetch(url, mergedOptions);\n      const data = await response.json();\n\n      if (!response.ok) {\n        try {\n          // Validate error response\n          const errorData = ErrorResponseSchema.parse(data);\n          throw new Error(errorData.error_description || errorData.error);\n        } catch (e) {\n          if (e instanceof z.ZodError) {\n            // Invalid error response format\n            throw new Error(`Request failed with status ${response.status}`);\n          }\n          throw e;\n        }\n      }\n\n      // Validate response with the provided schema\n      try {\n        return responseSchema.parse(data);\n      } catch (e) {\n        if (e instanceof z.ZodError) {\n          console.error(\"API response validation error:\", e.errors);\n          throw new Error(\"Invalid response from server\");\n        }\n        throw e;\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        if (error.message === \"Failed to fetch\") {\n          throw new Error(\"Network error. Please check your connection.\");\n        }\n        throw error;\n      }\n      throw new Error(\"Unknown error occurred\");\n    }\n  }\n\n  /**\n   * Store authentication tokens\n   * @private\n   */\n  private _storeTokens(tokenData: TokensResponse): void {\n    const { access_token, id_token, refresh_token, expires_in } = tokenData;\n\n    // Calculate expiration timestamp\n    const expiresAt = Math.floor(Date.now() / 1000) + (expires_in || 3600);\n\n    // Store tokens\n    this.storage.set(this.STORAGE_KEYS.ACCESS_TOKEN, access_token);\n    this.storage.set(this.STORAGE_KEYS.ID_TOKEN, id_token);\n    if (refresh_token) {\n      this.storage.set(this.STORAGE_KEYS.REFRESH_TOKEN, refresh_token);\n    }\n    this.storage.set(this.STORAGE_KEYS.EXPIRES_AT, expiresAt.toString());\n\n    // Setup refresh timer if auto-refresh is enabled\n    if (this.autoRefresh) {\n      this._setupRefreshTimer();\n    }\n\n    this._notifyAuthStateChange();\n  }\n\n  /**\n   * Get available authentication providers for this client\n   * @returns List of available providers\n   */\n  async getProviders(): Promise<StrippedClientProvider[]> {\n    return this._makeRequest(\n      `/auth/providers?client_id=${encodeURIComponent(this.clientId)}`,\n      { method: \"GET\" },\n      z.array(StrippedClientProviderSchema)\n    );\n  }\n\n  /**\n   * Register a new user with email and password\n   * @param data - Registration data\n   * @returns Auth code response\n   */\n  async registerWithEmail(\n    data: Omit<EmailRegistrationRequest, \"client_id\" | \"redirect_uri\"> & {\n      metadata?: Record<string, any>;\n    }\n  ): Promise<AuthCodeResponse> {\n    // Create and validate payload\n    const payload = EmailRegistrationRequestSchema.parse({\n      email: data.email,\n      password: data.password,\n      code_challenge: data.code_challenge,\n      code_challenge_method: data.code_challenge_method,\n      client_id: this.clientId,\n      redirect_uri: this.redirectUri,\n      metadata: data.metadata || {},\n    });\n\n    return this._makeRequest(\n      \"/auth/providers/email/register\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(payload),\n      },\n      AuthCodeResponseSchema\n    );\n  }\n\n  /**\n   * Login with email and password\n   * @param data - Login credentials\n   * @returns Auth code response\n   */\n  async loginWithEmail(\n    data: Omit<EmailLoginRequest, \"client_id\" | \"redirect_uri\">\n  ): Promise<AuthCodeResponse> {\n    // Create and validate payload\n    const payload = EmailLoginRequestSchema.parse({\n      email: data.email,\n      password: data.password,\n      code_challenge: data.code_challenge,\n      code_challenge_method: data.code_challenge_method,\n      client_id: this.clientId,\n      redirect_uri: this.redirectUri,\n    });\n\n    return this._makeRequest(\n      \"/auth/providers/email/login\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(payload),\n      },\n      AuthCodeResponseSchema\n    );\n  }\n\n  /**\n   * Exchange auth code for tokens and store them\n   * @param code - Auth code from login or registration\n   * @returns Token response\n   */\n  async exchangeCodeForTokens(code: string): Promise<TokensResponse> {\n    const state = this.storage.get(\"sentinel_state\");\n    const codeVerifier = this.storage.get(`sentinel_code_verifier_${state}`);\n\n    if (!codeVerifier) {\n      throw new Error(\"Authentication code verifier missing\");\n    }\n\n    // Create and validate payload\n    const payload = AuthTokenRequestSchema.parse({\n      code,\n      client_id: this.clientId,\n      code_verifier: codeVerifier,\n    });\n\n    const response = await this._makeRequest(\n      \"/auth/token\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(payload),\n      },\n      TokensResponseSchema\n    );\n\n    // Store the tokens\n    this._storeTokens(response);\n\n    return response;\n  }\n\n  /**\n   * Refresh the access and ID tokens using the refresh token\n   * @returns New tokens\n   */\n  async refreshTokens(): Promise<RefreshTokensResponse> {\n    const refreshToken = this.storage.get(this.STORAGE_KEYS.REFRESH_TOKEN);\n\n    if (!refreshToken) {\n      throw new Error(\"No refresh token available\");\n    }\n\n    const state = this.storage.get(\"sentinel_state\");\n    const codeVerifier = this.storage.get(`sentinel_code_verifier_${state}`);\n\n    if (!codeVerifier) {\n      throw new Error(\"Authentication code verifier missing\");\n    }\n\n    try {\n      // Create and validate payload\n      const payload = AuthRefreshRequestSchema.parse({\n        refresh_token: refreshToken,\n        client_id: this.clientId,\n        code_verifier: codeVerifier,\n      });\n\n      const response = await this._makeRequest(\n        \"/auth/refresh\",\n        {\n          method: \"POST\",\n          body: JSON.stringify(payload),\n        },\n        RefreshTokensResponseSchema\n      );\n\n      // Store the new tokens (keeping the existing refresh token)\n      this._storeTokens({\n        ...response,\n        refresh_token: refreshToken, // Keep the existing refresh token if not returned\n      });\n\n      return response;\n    } catch (error) {\n      // If refresh fails, clear the tokens and throw error\n      this.logout();\n      throw new Error(\"Token refresh failed. You have been logged out.\");\n    }\n  }\n\n  /**\n   * Verify if a token is valid\n   * @param token - Token to verify (uses stored access token if not provided)\n   * @returns Token verification result\n   */\n  async verifyToken(token?: string): Promise<AuthVerifyResponse> {\n    token = token || this.getAccessToken() || undefined;\n\n    if (!token) {\n      throw new Error(\"No token to verify\");\n    }\n\n    // Create and validate payload\n    const payload = AuthVerifyRequestSchema.parse({\n      token,\n      client_id: this.clientId,\n    });\n\n    return this._makeRequest(\n      \"/auth/verify\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(payload),\n      },\n      AuthVerifyResponseSchema\n    );\n  }\n\n  /**\n   * Get the stored access token\n   * @returns Access token or null if not logged in\n   */\n  getAccessToken(): string | null {\n    return this.storage.get(this.STORAGE_KEYS.ACCESS_TOKEN);\n  }\n\n  /**\n   * Get the stored ID token\n   * @returns ID token or null if not logged in\n   */\n  getIdToken(): string | null {\n    return this.storage.get(this.STORAGE_KEYS.ID_TOKEN);\n  }\n\n  /**\n   * Get the stored refresh token\n   * @returns Refresh token or null if not logged in\n   */\n  getRefreshToken(): string | null {\n    return this.storage.get(this.STORAGE_KEYS.REFRESH_TOKEN);\n  }\n\n  /**\n   * Get the token expiration timestamp\n   * @returns Expiration timestamp or null if not logged in\n   */\n  getTokenExpiration(): number | null {\n    const expiresAt = this.storage.get(this.STORAGE_KEYS.EXPIRES_AT);\n    return expiresAt ? parseInt(expiresAt, 10) : null;\n  }\n\n  /**\n   * Parse and decode a JWT token\n   * @param token - JWT token to decode\n   * @returns Decoded token payload or null if invalid\n   */\n  decodeToken(token: string): JWTClaims | null {\n    if (!token) return null;\n\n    try {\n      const base64Url = token.split(\".\")[1];\n      const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n      const jsonPayload = decodeURIComponent(\n        atob(base64)\n          .split(\"\")\n          .map((c) => \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2))\n          .join(\"\")\n      );\n\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error(\"Failed to decode token:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Get user information from the ID token\n   * @returns User information from the ID token or null if not logged in\n   */\n  getUserInfo(): JWTClaims | null {\n    const idToken = this.getIdToken();\n    return idToken ? this.decodeToken(idToken) : null;\n  }\n\n  /**\n   * Check if the user is authenticated (has valid tokens)\n   * @returns True if authenticated, false otherwise\n   */\n  isAuthenticated(): boolean {\n    const accessToken = this.getAccessToken();\n    const expiresAt = this.getTokenExpiration();\n\n    if (!accessToken || !expiresAt) {\n      return false;\n    }\n\n    const now = Math.floor(Date.now() / 1000);\n    return expiresAt > now;\n  }\n\n  /**\n   * Check if the access token is expired or will expire soon\n   * @param bufferSeconds - Buffer time in seconds\n   * @returns True if token is expired or will expire within buffer time\n   */\n  isTokenExpired(bufferSeconds = 0): boolean {\n    const expiresAt = this.getTokenExpiration();\n    if (!expiresAt) return true;\n\n    const now = Math.floor(Date.now() / 1000);\n    return expiresAt <= now + bufferSeconds;\n  }\n\n  /**\n   * Get an authorized request header object for API calls\n   * @param refreshIfNeeded - Whether to refresh token if expired\n   * @returns Headers object with Authorization header\n   */\n  async getAuthHeaders(\n    refreshIfNeeded = true\n  ): Promise<Record<string, string>> {\n    if (\n      refreshIfNeeded &&\n      this.isTokenExpired(this.refreshThreshold) &&\n      this.getRefreshToken()\n    ) {\n      await this.refreshTokens();\n    }\n\n    const accessToken = this.getAccessToken();\n\n    if (!accessToken) {\n      throw new Error(\"Not authenticated\");\n    }\n\n    return {\n      Authorization: `Bearer ${accessToken}`,\n    };\n  }\n\n  /**\n   * Complete sign-in flow by handling the authentication code\n   * @param code - Authentication code (from URL or provided)\n   * @returns Auth result\n   */\n  async handleAuthenticationCallback(code?: string): Promise<TokensResponse> {\n    // If no code is provided, try to get it from URL query parameters\n    if (!code) {\n      const urlParams = new URLSearchParams(window.location.search);\n      code = urlParams.get(\"code\") || undefined;\n    }\n\n    if (!code) {\n      throw new Error(\"No authentication code found\");\n    }\n\n    return this.exchangeCodeForTokens(code);\n  }\n\n  /**\n   * Logout the user by clearing tokens and canceling refresh timer\n   */\n  logout(): void {\n    // Clear the refresh timer\n    if (this.refreshTimerId) {\n      window.clearTimeout(this.refreshTimerId);\n      this.refreshTimerId = null;\n    }\n\n    // Clear all tokens from storage\n    this.storage.clear();\n\n    this._notifyAuthStateChange();\n  }\n\n  /**\n   * Generates a random string for state or code verifier\n   * @param length - Length of the random string\n   * @returns Random string\n   */\n  private _generateRandomString(length: number = 43): string {\n    const charset =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~\";\n    let random = \"\";\n    const randomValues = new Uint8Array(length);\n    window.crypto.getRandomValues(randomValues);\n    randomValues.forEach((val) => (random += charset[val % charset.length]));\n    return random;\n  }\n\n  /**\n   * Generates a code challenge from a code verifier\n   * @param codeVerifier - The code verifier string\n   * @returns Code challenge string\n   */\n  private async _generateCodeChallenge(codeVerifier: string): Promise<string> {\n    // Hash the code verifier using SHA-256\n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const hash = await window.crypto.subtle.digest(\"SHA-256\", data);\n\n    // Convert the hash to base64url encoding\n    const hashArr = Array.from(new Uint8Array(hash)); // Convert to regular array\n    const hashStr = hashArr.map((byte) => String.fromCharCode(byte)).join(\"\");\n    const base64 = btoa(hashStr);\n\n    const base64url = base64\n      .replace(/\\+/g, \"-\")\n      .replace(/\\//g, \"_\")\n      .replace(/=+$/, \"\");\n\n    return base64url;\n  }\n\n  /**\n   * Generate authentication URL for a provider with PKCE parameters\n   * @param providerId - ID of the authentication provider\n   * @param options - Additional options\n   * @returns Generated auth URL and PKCE data\n   */\n  async generateAuthUrl(\n    options: {\n      redirectUri?: string;\n      state?: string;\n      codeVerifier?: string;\n    } = {}\n  ): Promise<{\n    url: string;\n    state: string;\n    codeVerifier: string;\n  }> {\n    // Use provided values or generate new ones\n    const redirectUri = options.redirectUri || this.redirectUri;\n    if (!redirectUri) {\n      throw new Error(\n        \"redirectUri is required either in options or constructor config\"\n      );\n    }\n\n    const state = options.state || this._generateRandomString(32);\n    const codeVerifier = options.codeVerifier || this._generateRandomString(43);\n    const codeChallenge = await this._generateCodeChallenge(codeVerifier);\n\n    // Store code verifier in storage for later use during token exchange\n    this.storage.set(`sentinel_code_verifier_${state}`, codeVerifier);\n\n    console.log(codeVerifier, codeChallenge, state);\n\n    // store the state as well\n    this.storage.set(`sentinel_state`, state);\n\n    // Build query parameters\n    const params = new URLSearchParams({\n      client_id: this.clientId,\n      redirect_uri: redirectUri,\n      response_type: \"code\",\n      state,\n      code_challenge: codeChallenge,\n      code_challenge_method: \"S256\",\n    });\n\n    const url = `${this.uiBaseUrl}/?${params.toString()}`;\n\n    return {\n      url,\n      state,\n      codeVerifier,\n    };\n  }\n\n  /**\n   * Handle authentication callback with PKCE support\n   * @param options - Callback options\n   * @returns Token response\n   */\n  async handleAuthCallbackWithPKCE(\n    options: {\n      code?: string;\n      state?: string;\n      codeVerifier?: string;\n    } = {}\n  ): Promise<TokensResponse> {\n    // If no code or state is provided, try to get them from URL query parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = options.code || urlParams.get(\"code\");\n    const state = options.state || urlParams.get(\"state\");\n\n    if (!code) {\n      throw new Error(\"No authentication code found\");\n    }\n\n    let savedState = this.storage.get(`sentinel_state`);\n    if (!savedState || savedState !== state) {\n      throw new Error(\"Possible middle man attack\");\n    }\n\n    let codeVerifier = options.codeVerifier;\n\n    // If state is available and no code verifier provided, try to get from storage\n    if (state && !codeVerifier) {\n      codeVerifier =\n        this.storage.get(`sentinel_code_verifier_${state}`) || undefined;\n    }\n\n    if (!codeVerifier) {\n      throw new Error(\"No code verifier found for PKCE auth flow\");\n    }\n\n    // Create payload for token exchange with code verifier\n    const payload = {\n      code,\n      client_id: this.clientId,\n      code_verifier: codeVerifier,\n      redirect_uri: this.redirectUri,\n    };\n\n    // Exchange code for tokens\n    const response = await this._makeRequest(\n      \"/auth/token\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(payload),\n      },\n      TokensResponseSchema\n    );\n\n    // Store the tokens\n    this._storeTokens(response);\n\n    return response;\n  }\n}\n\n// Export the SentinelAuth class\nexport default SentinelAuth;\n"],"names":["z"],"mappings":";;;;AAAA;AAEA;;;AAGG;AAIH;AACA,MAAM,oBAAoB,GAAGA,KAAC,CAAC,MAAM,CAAC;AACpC,IAAA,YAAY,EAAEA,KAAC,CAAC,MAAM,EAAE;AACxB,IAAA,QAAQ,EAAEA,KAAC,CAAC,MAAM,EAAE;AACpB,IAAA,aAAa,EAAEA,KAAC,CAAC,MAAM,EAAE;AACzB,IAAA,UAAU,EAAEA,KAAC,CAAC,MAAM,EAAE;AACvB,CAAA,CAAC;AAEF,MAAM,2BAA2B,GAAGA,KAAC,CAAC,MAAM,CAAC;AAC3C,IAAA,YAAY,EAAEA,KAAC,CAAC,MAAM,EAAE;AACxB,IAAA,QAAQ,EAAEA,KAAC,CAAC,MAAM,EAAE;AACpB,IAAA,UAAU,EAAEA,KAAC,CAAC,MAAM,EAAE;AACvB,CAAA,CAAC;AAEF,MAAM,sBAAsB,GAAGA,KAAC,CAAC,MAAM,CAAC;AACtC,IAAA,IAAI,EAAEA,KAAC,CAAC,MAAM,EAAE;AAChB,IAAA,UAAU,EAAEA,KAAC,CAAC,MAAM,EAAE;AACvB,CAAA,CAAC;AAEF,MAAM,8BAA8B,GAAGA,KAAC,CAAC,MAAM,CAAC;AAC9C,IAAA,KAAK,EAAEA,KAAC,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;IACzB,QAAQ,EAAEA,KAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AAC3B,IAAA,SAAS,EAAEA,KAAC,CAAC,MAAM,EAAE;AACrB,IAAA,cAAc,EAAEA,KAAC,CAAC,MAAM,EAAE;AAC1B,IAAA,qBAAqB,EAAEA,KAAC,CAAC,MAAM,EAAE;IACjC,YAAY,EAAEA,KAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;AACzC,IAAA,QAAQ,EAAEA,KAAC,CAAC,MAAM,CAACA,KAAC,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,EAAE;AACvC,CAAA,CAAC;AAEF,MAAM,uBAAuB,GAAGA,KAAC,CAAC,MAAM,CAAC;AACvC,IAAA,KAAK,EAAEA,KAAC,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;AACzB,IAAA,QAAQ,EAAEA,KAAC,CAAC,MAAM,EAAE;AACpB,IAAA,SAAS,EAAEA,KAAC,CAAC,MAAM,EAAE;AACrB,IAAA,cAAc,EAAEA,KAAC,CAAC,MAAM,EAAE;AAC1B,IAAA,qBAAqB,EAAEA,KAAC,CAAC,MAAM,EAAE;IACjC,YAAY,EAAEA,KAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;AAC1C,CAAA,CAAC;AAEF,MAAM,sBAAsB,GAAGA,KAAC,CAAC,MAAM,CAAC;AACtC,IAAA,IAAI,EAAEA,KAAC,CAAC,MAAM,EAAE;AAChB,IAAA,SAAS,EAAEA,KAAC,CAAC,MAAM,EAAE;AACrB,IAAA,aAAa,EAAEA,KAAC,CAAC,MAAM,EAAE;AAC1B,CAAA,CAAC;AAEF,MAAM,wBAAwB,GAAGA,KAAC,CAAC,MAAM,CAAC;AACxC,IAAA,aAAa,EAAEA,KAAC,CAAC,MAAM,EAAE;AACzB,IAAA,SAAS,EAAEA,KAAC,CAAC,MAAM,EAAE;AACrB,IAAA,aAAa,EAAEA,KAAC,CAAC,MAAM,EAAE;AAC1B,CAAA,CAAC;AAEF,MAAM,uBAAuB,GAAGA,KAAC,CAAC,MAAM,CAAC;AACvC,IAAA,KAAK,EAAEA,KAAC,CAAC,MAAM,EAAE;AACjB,IAAA,SAAS,EAAEA,KAAC,CAAC,MAAM,EAAE;AACtB,CAAA,CAAC;AAEF,MAAM,wBAAwB,GAAGA,KAAC,CAAC,MAAM,CAAC;AACxC,IAAA,KAAK,EAAEA,KAAC,CAAC,OAAO,EAAE;IAClB,MAAM,EAAEA,KAAC,CAAC,MAAM,CAACA,KAAC,CAAC,GAAG,EAAE,CAAC;AAC1B,CAAA,CAAC;AAEF,MAAM,oBAAoB,GAAGA,KAAC,CAAC,MAAM,CAAC;AACpC,IAAA,EAAE,EAAEA,KAAC,CAAC,MAAM,EAAE;AACd,IAAA,IAAI,EAAEA,KAAC,CAAC,MAAM,EAAE;AAChB,IAAA,QAAQ,EAAEA,KAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;AAC/B,IAAA,WAAW,EAAEA,KAAC,CAAC,MAAM,EAAE;AACxB,CAAA,CAAC;AAEF,MAAM,4BAA4B,GAAGA,KAAC,CAAC,MAAM,CAAC;AAC5C,IAAA,EAAE,EAAEA,KAAC,CAAC,MAAM,EAAE;AACd,IAAA,SAAS,EAAEA,KAAC,CAAC,MAAM,EAAE;AACrB,IAAA,eAAe,EAAE,oBAAoB;AACrC,IAAA,IAAI,EAAEA,KAAC,CAAC,MAAM,CAACA,KAAC,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE;AAC9C,CAAA,CAAC;AAEF,MAAM,mBAAmB,GAAGA,KAAC,CAAC,MAAM,CAAC;AACnC,IAAA,KAAK,EAAEA,KAAC,CAAC,MAAM,EAAE;AACjB,IAAA,iBAAiB,EAAEA,KAAC,CAAC,MAAM,EAAE;AAC9B,CAAA,CAAC;AAwDF,MAAM,YAAY,CAAA;AAkBhB;;;AAGG;AACH,IAAA,WAAA,CAAY,MAA0B,EAAA;QAb9B,IAAc,CAAA,cAAA,GAAkB,IAAI;QAOpC,IAAkB,CAAA,kBAAA,GAA8B,EAAE;;QAQxD,IAAI,CAAC,MAAM,CAAC,UAAU;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC;QAC9D,IAAI,CAAC,MAAM,CAAC,QAAQ;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC;AAE7D,QAAA,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AACvD,QAAA,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAErD,QAAA,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ;QAC/B,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,IAAI,SAAS;;QAGlD,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,IAAI,cAAc;QACvD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC;;QAGxD,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,KAAK,KAAK;QAC/C,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,IAAI,GAAG,CAAC;;QAGvD,IAAI,CAAC,YAAY,GAAG;AAClB,YAAA,YAAY,EAAE,CAAA,sBAAA,EAAyB,IAAI,CAAC,QAAQ,CAAE,CAAA;AACtD,YAAA,QAAQ,EAAE,CAAA,kBAAA,EAAqB,IAAI,CAAC,QAAQ,CAAE,CAAA;AAC9C,YAAA,aAAa,EAAE,CAAA,uBAAA,EAA0B,IAAI,CAAC,QAAQ,CAAE,CAAA;AACxD,YAAA,UAAU,EAAE,CAAA,oBAAA,EAAuB,IAAI,CAAC,QAAQ,CAAE,CAAA;SACnD;;QAGD,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,eAAe,EAAE,EAAE;YAC9C,IAAI,CAAC,kBAAkB,EAAE;;;AAI7B;;;AAGG;AACK,IAAA,kBAAkB,CACxB,IAAkD,EAAA;QAElD,QAAQ,IAAI;AACV,YAAA,KAAK,cAAc;gBACjB,OAAO;oBACL,GAAG,EAAE,CAAC,GAAW,KAAK,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC;AAC/C,oBAAA,GAAG,EAAE,CAAC,GAAW,EAAE,KAAa,KAAK,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC;oBACrE,MAAM,EAAE,CAAC,GAAW,KAAK,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC;oBACrD,KAAK,EAAE,MAAK;wBACV,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAC3C,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAC7B;qBACF;iBACF;AACH,YAAA,KAAK,gBAAgB;gBACnB,OAAO;oBACL,GAAG,EAAE,CAAC,GAAW,KAAK,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC;AACjD,oBAAA,GAAG,EAAE,CAAC,GAAW,EAAE,KAAa,KAC9B,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC;oBACpC,MAAM,EAAE,CAAC,GAAW,KAAK,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC;oBACvD,KAAK,EAAE,MAAK;wBACV,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAC3C,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,CAC/B;qBACF;iBACF;AACH,YAAA,KAAK,QAAQ;gBACX,MAAM,aAAa,GAA2B,EAAE;gBAChD,OAAO;oBACL,GAAG,EAAE,CAAC,GAAW,KAAK,aAAa,CAAC,GAAG,CAAC,IAAI,IAAI;AAChD,oBAAA,GAAG,EAAE,CAAC,GAAW,EAAE,KAAa,KAAI;AAClC,wBAAA,aAAa,CAAC,GAAG,CAAC,GAAG,KAAK;qBAC3B;AACD,oBAAA,MAAM,EAAE,CAAC,GAAW,KAAI;AACtB,wBAAA,OAAO,aAAa,CAAC,GAAG,CAAC;qBAC1B;oBACD,KAAK,EAAE,MAAK;AACV,wBAAA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;AAC/C,4BAAA,OAAO,aAAa,CAAC,GAAG,CAAC;AAC3B,yBAAC,CAAC;qBACH;iBACF;AACH,YAAA;AACE,gBAAA,MAAM,IAAI,KAAK,CAAC,6BAA6B,IAAI,CAAA,CAAE,CAAC;;;AAI1D;;;AAGG;IACK,kBAAkB,GAAA;AACxB,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;AACnE,QAAA,IAAI,CAAC,YAAY;YAAE;QAEnB,MAAM,SAAS,GAAG,QAAQ,CAAC,YAAY,EAAE,EAAE,CAAC;AAC5C,QAAA,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;QACzC,MAAM,gBAAgB,GAAG,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,gBAAgB;AAEhE,QAAA,IAAI,gBAAgB,IAAI,CAAC,EAAE;;YAEzB,IAAI,CAAC,aAAa,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,KAC7B,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAChD;;aACI;;YAEL,IAAI,IAAI,CAAC,cAAc;AAAE,gBAAA,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC;YACjE,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,MAAK;gBAC3C,IAAI,CAAC,aAAa,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,KAC7B,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAChD;AACH,aAAC,EAAE,gBAAgB,GAAG,IAAI,CAAC;;;AAI/B;;;AAGG;IACH,mBAAmB,GAAA;AACjB,QAAA,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,EAAE;AAC9C,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE;AAC/B,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,EAAE;QAE3C,OAAO;YACL,eAAe;YACf,IAAI;YACJ,SAAS;SACV;;AAGH;;;AAGG;IACK,sBAAsB,GAAA;AAC5B,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,EAAE;QAC/C,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAI;AAC3C,YAAA,IAAI;AACF,gBAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;gBACvB,QAAQ,CAAC,YAAY,CAAC;;YACtB,OAAO,KAAK,EAAE;AACd,gBAAA,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC;;AAEhE,SAAC,CAAC;;AAGJ;;;;AAIG;AACH,IAAA,iBAAiB,CAAC,QAAiC,EAAA;AACjD,QAAA,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC;;AAGtC,QAAA,IAAI;AACF,YAAA,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;AACxB,YAAA,QAAQ,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;;QACpC,OAAO,KAAK,EAAE;AACd,YAAA,OAAO,CAAC,KAAK,CAAC,2CAA2C,EAAE,KAAK,CAAC;;;AAInE,QAAA,OAAO,MAAK;AACV,YAAA,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CACtD,CAAC,CAAC,KAAK,CAAC,KAAK,QAAQ,CACtB;AACH,SAAC;;AAGH;;;AAGG;IACK,MAAM,YAAY,CACxB,QAAgB,EAChB,OAAuB,GAAA,EAAE,EACzB,cAA4B,EAAA;QAE5B,MAAM,GAAG,GAAG,CAAG,EAAA,IAAI,CAAC,UAAU,CAAA,EAAG,QAAQ,CAAA,CAAE;AAE3C,QAAA,MAAM,cAAc,GAAgB;AAClC,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,kBAAkB;AACnC,aAAA;SACF;AAED,QAAA,MAAM,aAAa,GAAgB;AACjC,YAAA,GAAG,cAAc;AACjB,YAAA,GAAG,OAAO;AACV,YAAA,OAAO,EAAE;gBACP,GAAG,cAAc,CAAC,OAAO;gBACzB,GAAG,OAAO,CAAC,OAAO;AACnB,aAAA;SACF;QAED,IACE,aAAa,CAAC,IAAI;AAClB,YAAA,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ;YACtC,EAAE,aAAa,CAAC,IAAI,YAAY,QAAQ,CAAC,EACzC;YACA,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC;;AAGzD,QAAA,IAAI;YACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC;AAChD,YAAA,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE;AAElC,YAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;AAChB,gBAAA,IAAI;;oBAEF,MAAM,SAAS,GAAG,mBAAmB,CAAC,KAAK,CAAC,IAAI,CAAC;oBACjD,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,iBAAiB,IAAI,SAAS,CAAC,KAAK,CAAC;;gBAC/D,OAAO,CAAC,EAAE;AACV,oBAAA,IAAI,CAAC,YAAYA,KAAC,CAAC,QAAQ,EAAE;;wBAE3B,MAAM,IAAI,KAAK,CAAC,CAAA,2BAAA,EAA8B,QAAQ,CAAC,MAAM,CAAE,CAAA,CAAC;;AAElE,oBAAA,MAAM,CAAC;;;;AAKX,YAAA,IAAI;AACF,gBAAA,OAAO,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC;;YACjC,OAAO,CAAC,EAAE;AACV,gBAAA,IAAI,CAAC,YAAYA,KAAC,CAAC,QAAQ,EAAE;oBAC3B,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,CAAC,CAAC,MAAM,CAAC;AACzD,oBAAA,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC;;AAEjD,gBAAA,MAAM,CAAC;;;QAET,OAAO,KAAK,EAAE;AACd,YAAA,IAAI,KAAK,YAAY,KAAK,EAAE;AAC1B,gBAAA,IAAI,KAAK,CAAC,OAAO,KAAK,iBAAiB,EAAE;AACvC,oBAAA,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC;;AAEjE,gBAAA,MAAM,KAAK;;AAEb,YAAA,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC;;;AAI7C;;;AAGG;AACK,IAAA,YAAY,CAAC,SAAyB,EAAA;QAC5C,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,GAAG,SAAS;;AAGvE,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,IAAI,UAAU,IAAI,IAAI,CAAC;;AAGtE,QAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,YAAY,CAAC;AAC9D,QAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,QAAQ,CAAC;QACtD,IAAI,aAAa,EAAE;AACjB,YAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,aAAa,CAAC;;AAElE,QAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,SAAS,CAAC,QAAQ,EAAE,CAAC;;AAGpE,QAAA,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,kBAAkB,EAAE;;QAG3B,IAAI,CAAC,sBAAsB,EAAE;;AAG/B;;;AAGG;AACH,IAAA,MAAM,YAAY,GAAA;QAChB,OAAO,IAAI,CAAC,YAAY,CACtB,CAAA,0BAAA,EAA6B,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAE,CAAA,EAChE,EAAE,MAAM,EAAE,KAAK,EAAE,EACjBA,KAAC,CAAC,KAAK,CAAC,4BAA4B,CAAC,CACtC;;AAGH;;;;AAIG;IACH,MAAM,iBAAiB,CACrB,IAEC,EAAA;;AAGD,QAAA,MAAM,OAAO,GAAG,8BAA8B,CAAC,KAAK,CAAC;YACnD,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,qBAAqB,EAAE,IAAI,CAAC,qBAAqB;YACjD,SAAS,EAAE,IAAI,CAAC,QAAQ;YACxB,YAAY,EAAE,IAAI,CAAC,WAAW;AAC9B,YAAA,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,EAAE;AAC9B,SAAA,CAAC;AAEF,QAAA,OAAO,IAAI,CAAC,YAAY,CACtB,gCAAgC,EAChC;AACE,YAAA,MAAM,EAAE,MAAM;AACd,YAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;SAC9B,EACD,sBAAsB,CACvB;;AAGH;;;;AAIG;IACH,MAAM,cAAc,CAClB,IAA2D,EAAA;;AAG3D,QAAA,MAAM,OAAO,GAAG,uBAAuB,CAAC,KAAK,CAAC;YAC5C,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,qBAAqB,EAAE,IAAI,CAAC,qBAAqB;YACjD,SAAS,EAAE,IAAI,CAAC,QAAQ;YACxB,YAAY,EAAE,IAAI,CAAC,WAAW;AAC/B,SAAA,CAAC;AAEF,QAAA,OAAO,IAAI,CAAC,YAAY,CACtB,6BAA6B,EAC7B;AACE,YAAA,MAAM,EAAE,MAAM;AACd,YAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;SAC9B,EACD,sBAAsB,CACvB;;AAGH;;;;AAIG;IACH,MAAM,qBAAqB,CAAC,IAAY,EAAA;QACtC,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;AAChD,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAA0B,uBAAA,EAAA,KAAK,CAAE,CAAA,CAAC;QAExE,IAAI,CAAC,YAAY,EAAE;AACjB,YAAA,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC;;;AAIzD,QAAA,MAAM,OAAO,GAAG,sBAAsB,CAAC,KAAK,CAAC;YAC3C,IAAI;YACJ,SAAS,EAAE,IAAI,CAAC,QAAQ;AACxB,YAAA,aAAa,EAAE,YAAY;AAC5B,SAAA,CAAC;QAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CACtC,aAAa,EACb;AACE,YAAA,MAAM,EAAE,MAAM;AACd,YAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;SAC9B,EACD,oBAAoB,CACrB;;AAGD,QAAA,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;AAE3B,QAAA,OAAO,QAAQ;;AAGjB;;;AAGG;AACH,IAAA,MAAM,aAAa,GAAA;AACjB,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;QAEtE,IAAI,CAAC,YAAY,EAAE;AACjB,YAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;;QAG/C,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;AAChD,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAA0B,uBAAA,EAAA,KAAK,CAAE,CAAA,CAAC;QAExE,IAAI,CAAC,YAAY,EAAE;AACjB,YAAA,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC;;AAGzD,QAAA,IAAI;;AAEF,YAAA,MAAM,OAAO,GAAG,wBAAwB,CAAC,KAAK,CAAC;AAC7C,gBAAA,aAAa,EAAE,YAAY;gBAC3B,SAAS,EAAE,IAAI,CAAC,QAAQ;AACxB,gBAAA,aAAa,EAAE,YAAY;AAC5B,aAAA,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CACtC,eAAe,EACf;AACE,gBAAA,MAAM,EAAE,MAAM;AACd,gBAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;aAC9B,EACD,2BAA2B,CAC5B;;YAGD,IAAI,CAAC,YAAY,CAAC;AAChB,gBAAA,GAAG,QAAQ;gBACX,aAAa,EAAE,YAAY;AAC5B,aAAA,CAAC;AAEF,YAAA,OAAO,QAAQ;;QACf,OAAO,KAAK,EAAE;;YAEd,IAAI,CAAC,MAAM,EAAE;AACb,YAAA,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC;;;AAItE;;;;AAIG;IACH,MAAM,WAAW,CAAC,KAAc,EAAA;QAC9B,KAAK,GAAG,KAAK,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,SAAS;QAEnD,IAAI,CAAC,KAAK,EAAE;AACV,YAAA,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC;;;AAIvC,QAAA,MAAM,OAAO,GAAG,uBAAuB,CAAC,KAAK,CAAC;YAC5C,KAAK;YACL,SAAS,EAAE,IAAI,CAAC,QAAQ;AACzB,SAAA,CAAC;AAEF,QAAA,OAAO,IAAI,CAAC,YAAY,CACtB,cAAc,EACd;AACE,YAAA,MAAM,EAAE,MAAM;AACd,YAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;SAC9B,EACD,wBAAwB,CACzB;;AAGH;;;AAGG;IACH,cAAc,GAAA;AACZ,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC;;AAGzD;;;AAGG;IACH,UAAU,GAAA;AACR,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;;AAGrD;;;AAGG;IACH,eAAe,GAAA;AACb,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;;AAG1D;;;AAGG;IACH,kBAAkB,GAAA;AAChB,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;AAChE,QAAA,OAAO,SAAS,GAAG,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC,GAAG,IAAI;;AAGnD;;;;AAIG;AACH,IAAA,WAAW,CAAC,KAAa,EAAA;AACvB,QAAA,IAAI,CAAC,KAAK;AAAE,YAAA,OAAO,IAAI;AAEvB,QAAA,IAAI;YACF,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACrC,YAAA,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;AAC9D,YAAA,MAAM,WAAW,GAAG,kBAAkB,CACpC,IAAI,CAAC,MAAM;iBACR,KAAK,CAAC,EAAE;AACR,iBAAA,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;AAChE,iBAAA,IAAI,CAAC,EAAE,CAAC,CACZ;AAED,YAAA,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;;QAC9B,OAAO,KAAK,EAAE;AACd,YAAA,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC;AAC/C,YAAA,OAAO,IAAI;;;AAIf;;;AAGG;IACH,WAAW,GAAA;AACT,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE;AACjC,QAAA,OAAO,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,IAAI;;AAGnD;;;AAGG;IACH,eAAe,GAAA;AACb,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE;AACzC,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,EAAE;AAE3C,QAAA,IAAI,CAAC,WAAW,IAAI,CAAC,SAAS,EAAE;AAC9B,YAAA,OAAO,KAAK;;AAGd,QAAA,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;QACzC,OAAO,SAAS,GAAG,GAAG;;AAGxB;;;;AAIG;IACH,cAAc,CAAC,aAAa,GAAG,CAAC,EAAA;AAC9B,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,EAAE;AAC3C,QAAA,IAAI,CAAC,SAAS;AAAE,YAAA,OAAO,IAAI;AAE3B,QAAA,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;AACzC,QAAA,OAAO,SAAS,IAAI,GAAG,GAAG,aAAa;;AAGzC;;;;AAIG;AACH,IAAA,MAAM,cAAc,CAClB,eAAe,GAAG,IAAI,EAAA;AAEtB,QAAA,IACE,eAAe;AACf,YAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC;AAC1C,YAAA,IAAI,CAAC,eAAe,EAAE,EACtB;AACA,YAAA,MAAM,IAAI,CAAC,aAAa,EAAE;;AAG5B,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE;QAEzC,IAAI,CAAC,WAAW,EAAE;AAChB,YAAA,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC;;QAGtC,OAAO;YACL,aAAa,EAAE,CAAU,OAAA,EAAA,WAAW,CAAE,CAAA;SACvC;;AAGH;;;;AAIG;IACH,MAAM,4BAA4B,CAAC,IAAa,EAAA;;QAE9C,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC7D,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,SAAS;;QAG3C,IAAI,CAAC,IAAI,EAAE;AACT,YAAA,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC;;AAGjD,QAAA,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC;;AAGzC;;AAEG;IACH,MAAM,GAAA;;AAEJ,QAAA,IAAI,IAAI,CAAC,cAAc,EAAE;AACvB,YAAA,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC;AACxC,YAAA,IAAI,CAAC,cAAc,GAAG,IAAI;;;AAI5B,QAAA,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;QAEpB,IAAI,CAAC,sBAAsB,EAAE;;AAG/B;;;;AAIG;IACK,qBAAqB,CAAC,SAAiB,EAAE,EAAA;QAC/C,MAAM,OAAO,GACX,oEAAoE;QACtE,IAAI,MAAM,GAAG,EAAE;AACf,QAAA,MAAM,YAAY,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC;AAC3C,QAAA,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC;QAC3C,YAAY,CAAC,OAAO,CAAC,CAAC,GAAG,MAAM,MAAM,IAAI,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AACxE,QAAA,OAAO,MAAM;;AAGf;;;;AAIG;IACK,MAAM,sBAAsB,CAAC,YAAoB,EAAA;;AAEvD,QAAA,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE;QACjC,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC;AACzC,QAAA,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC;;AAG/D,QAAA,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;QACjD,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;AACzE,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAE5B,MAAM,SAAS,GAAG;AACf,aAAA,OAAO,CAAC,KAAK,EAAE,GAAG;AAClB,aAAA,OAAO,CAAC,KAAK,EAAE,GAAG;AAClB,aAAA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;AAErB,QAAA,OAAO,SAAS;;AAGlB;;;;;AAKG;AACH,IAAA,MAAM,eAAe,CACnB,OAAA,GAII,EAAE,EAAA;;QAON,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW;QAC3D,IAAI,CAAC,WAAW,EAAE;AAChB,YAAA,MAAM,IAAI,KAAK,CACb,iEAAiE,CAClE;;AAGH,QAAA,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC;AAC7D,QAAA,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC;QAC3E,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,YAAY,CAAC;;QAGrE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAA0B,uBAAA,EAAA,KAAK,CAAE,CAAA,EAAE,YAAY,CAAC;QAEjE,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,aAAa,EAAE,KAAK,CAAC;;QAG/C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAgB,cAAA,CAAA,EAAE,KAAK,CAAC;;AAGzC,QAAA,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;YACjC,SAAS,EAAE,IAAI,CAAC,QAAQ;AACxB,YAAA,YAAY,EAAE,WAAW;AACzB,YAAA,aAAa,EAAE,MAAM;YACrB,KAAK;AACL,YAAA,cAAc,EAAE,aAAa;AAC7B,YAAA,qBAAqB,EAAE,MAAM;AAC9B,SAAA,CAAC;AAEF,QAAA,MAAM,GAAG,GAAG,CAAG,EAAA,IAAI,CAAC,SAAS,CAAK,EAAA,EAAA,MAAM,CAAC,QAAQ,EAAE,CAAA,CAAE;QAErD,OAAO;YACL,GAAG;YACH,KAAK;YACL,YAAY;SACb;;AAGH;;;;AAIG;AACH,IAAA,MAAM,0BAA0B,CAC9B,OAAA,GAII,EAAE,EAAA;;QAGN,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC7D,QAAA,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC;AAClD,QAAA,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC;QAErD,IAAI,CAAC,IAAI,EAAE;AACT,YAAA,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC;;QAGjD,IAAI,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAgB,cAAA,CAAA,CAAC;AACnD,QAAA,IAAI,CAAC,UAAU,IAAI,UAAU,KAAK,KAAK,EAAE;AACvC,YAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;;AAG/C,QAAA,IAAI,YAAY,GAAG,OAAO,CAAC,YAAY;;AAGvC,QAAA,IAAI,KAAK,IAAI,CAAC,YAAY,EAAE;YAC1B,YAAY;gBACV,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAA0B,uBAAA,EAAA,KAAK,CAAE,CAAA,CAAC,IAAI,SAAS;;QAGpE,IAAI,CAAC,YAAY,EAAE;AACjB,YAAA,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC;;;AAI9D,QAAA,MAAM,OAAO,GAAG;YACd,IAAI;YACJ,SAAS,EAAE,IAAI,CAAC,QAAQ;AACxB,YAAA,aAAa,EAAE,YAAY;YAC3B,YAAY,EAAE,IAAI,CAAC,WAAW;SAC/B;;QAGD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CACtC,aAAa,EACb;AACE,YAAA,MAAM,EAAE,MAAM;AACd,YAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;SAC9B,EACD,oBAAoB,CACrB;;AAGD,QAAA,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;AAE3B,QAAA,OAAO,QAAQ;;AAElB;;;;"}